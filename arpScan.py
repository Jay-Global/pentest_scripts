import re
from scapy.all import ARP, Ether, srp
import requests

# Define ANSI color codes
class bcolors:
    HEADER = '\033[95m'
    OKBLUE = '\033[94m'
    OKCYAN = '\033[96m'
    OKGREEN = '\033[92m'
    WARNING = '\033[93m'
    FAIL = '\033[91m'
    ENDC = '\033[0m'
    BOLD = '\033[1m'
    UNDERLINE = '\033[4m'

# ASCII Art Introduction with a Box
def show_intro():
    ascii_art = f"""
{bcolors.OKBLUE}
    ************************************
    *  Tool developed by Jay-Global    *
    *  For educational purposes only   *
    ************************************{bcolors.ENDC}

"""
    print(ascii_art)

# Validate the network range using regex for CIDR notation (e.g., 192.168.1.0/24)
def validate_network_range(network_range):
    cidr_regex = re.compile(r"^\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}/\d{1,2}$")
    if not cidr_regex.match(network_range):
        return False
    return True

# Function to perform a MAC vendor lookup using an online API
def get_mac_vendor(mac_address):
    try:
        # Using a simple MAC address API to fetch vendor information
        url = f"https://api.macvendors.com/{mac_address}"
        response = requests.get(url)
        if response.status_code == 200:
            return response.text.strip()
        else:
            return "Unknown vendor"
    except Exception:
        return "Vendor lookup failed"

# ARP scan function
def arp_scan(network_range):
    # Craft an ARP request packet
    arp = ARP(pdst=network_range)
    # Create an Ethernet frame to broadcast the ARP request
    ether = Ether(dst="ff:ff:ff:ff:ff:ff")
    # Combine ARP request and Ethernet frame
    packet = ether / arp

    print(f"Scanning network: {network_range}...")

    # Send the packet and capture the response
    result = srp(packet, timeout=3, verbose=0)[0]

    devices = []

    # Parse the response
    for sent, received in result:
        # Get the MAC vendor using the function
        mac_vendor = get_mac_vendor(received.hwsrc)
        devices.append({'ip': received.psrc, 'mac': received.hwsrc, 'vendor': mac_vendor})

    # Print the results
    print("\nAvailable devices in the network:")
    print(f"{'IP':<20}{'MAC':<20}{'MAC Vendor / Hostname'}")
    print("-" * 60)
    for device in devices:
        print(f"{device['ip']:<20}{device['mac']:<20}{device['vendor']}")
    
    return devices

# Function to display instructions
def show_instructions():
    print("\nInstructions:")
    print("This tool performs an ARP scan on a local network and identifies live hosts along with their MAC addresses and vendors.")
    print("You need to provide a valid network range in CIDR notation (e.g., 192.168.1.0/24).")
    print("The tool will send ARP requests to all devices in the specified network and display the results.\n")

if __name__ == "__main__":
    # Show instructions to the user
    show_intro()
    show_instructions()

    # Prompt the user for the network range
    while True:
        network_range = input("Please enter the network range (CIDR notation, e.g., 192.168.1.0/24): ")

        # Validate the network range input
        if validate_network_range(network_range):
            break
        else:
            print(f"Invalid network range: {network_range}. Please provide a valid CIDR notation (e.g., 192.168.1.0/24).")

    # Run the ARP scan
    arp_scan(network_range)
