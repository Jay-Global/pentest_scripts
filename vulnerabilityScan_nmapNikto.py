import subprocess
import datetime
import socket

# Define ANSI color codes
class bcolors:
    HEADER = '\033[95m'
    OKBLUE = '\033[94m'
    OKCYAN = '\033[96m'
    OKGREEN = '\033[92m'
    WARNING = '\033[93m'
    FAIL = '\033[91m'
    ENDC = '\033[0m'
    BOLD = '\033[1m'
    UNDERLINE = '\033[4m'

# ASCII Art Introduction with a Box
def show_intro():
    ascii_art = f"""
{bcolors.OKBLUE}
    ************************************
    *  Tool developed by Jay-Global    *
    *  For educational purposes only   *
    ************************************{bcolors.ENDC}

"""
    print(ascii_art)

# Function to validate if the input string is a valid IP address
def is_valid_ip(ip):
    parts = ip.split('.')
    if len(parts) != 4:
        return False
    for part in parts:
        if not part.isdigit() or not (0 <= int(part) <= 255):
            return False
    try:
        socket.inet_aton(ip)
        return True
    except socket.error:
        return False

# Get timestamp
timestamp = datetime.datetime.now().strftime("%Y%m%d-%H%M%S")

# Function to run Nmap scan
def run_nmap(target):
    print(bcolors.OKCYAN + f"Running Nmap vulnerability scan on {target}..." + bcolors.ENDC)
    nmap_output = f"nmap_vuln_scan_{target}_{timestamp}.txt"
    try:
        subprocess.run(["nmap", "-sV", "--script", "vuln", target, "-oN", nmap_output], check=True)
        print(bcolors.OKGREEN + f"Nmap scan results saved to {nmap_output}" + bcolors.ENDC)
    except subprocess.CalledProcessError as e:
        print(bcolors.FAIL + f"Error running Nmap: {e}" + bcolors.ENDC)

# Function to run Nikto scan on multiple ports
def run_nikto(target):
    # List of common web ports to scan (you can add more if necessary)
    common_ports = [80, 443, 8080]

    for port in common_ports:
        print(bcolors.OKCYAN + f"Running Nikto web vulnerability scan on {target}:{port}..." + bcolors.ENDC)
        nikto_output = f"nikto_scan_{target}_{port}_{timestamp}.txt"
        try:
            subprocess.run(["nikto", "-h", f"http://{target}:{port}", "-o", nikto_output], check=True)
            print(bcolors.OKGREEN + f"Nikto scan results for port {port} saved to {nikto_output}" + bcolors.ENDC)
        except subprocess.CalledProcessError as e:
            print(bcolors.FAIL + f"Error running Nikto on port {port}: {e}" + bcolors.ENDC)

# Main function to run the scans for each target
def run_scans():
    # Ask user for IP addresses, allow multiple IPs separated by spaces
    while True:
        target_ips = input(f"{bcolors.HEADER}Enter the target IP address(es) (separated by spaces): {bcolors.ENDC}")
        ip_list = target_ips.split()

        # Validate each IP in the list
        invalid_ips = [ip for ip in ip_list if not is_valid_ip(ip)]
        if invalid_ips:
            print(bcolors.FAIL + f"Invalid IP(s) entered: {', '.join(invalid_ips)}. Please try again." + bcolors.ENDC)
        else:
            break

    # Run scans for each target
    for target in ip_list:
        run_nmap(target)
        run_nikto(target)

    print(bcolors.OKGREEN + "Vulnerability scanning completed!" + bcolors.ENDC)

if __name__ == "__main__":
    show_intro()  # Show the ASCII art and disclaimer
    run_scans()
